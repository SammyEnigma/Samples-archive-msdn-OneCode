'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18051
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


'
'This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
'
Namespace AccessSQLService
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="AccessSQLService.IService")>  _
    Public Interface IService
        
        'CODEGEN: Generating message contract since the operation has multiple return values.
        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService/querySql", ReplyAction:="http://tempuri.org/IService/querySqlResponse"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true)>  _
        Function querySqlAsync(ByVal request As AccessSQLService.querySqlRequest) As System.Threading.Tasks.Task(Of AccessSQLService.querySqlResponse)
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="querySql", WrapperNamespace:="http://tempuri.org/", IsWrapped:=true)>  _
    Partial Public Class querySqlRequest
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://tempuri.org/", Order:=0)>  _
        Public queryParam As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal queryParam As Boolean)
            MyBase.New
            Me.queryParam = queryParam
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="querySqlResponse", WrapperNamespace:="http://tempuri.org/", IsWrapped:=true)>  _
    Partial Public Class querySqlResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://tempuri.org/", Order:=0),  _
         System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public querySqlResult As AccessSQLService.ArrayOfXElement
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://tempuri.org/", Order:=1)>  _
        Public queryParam As Boolean
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal querySqlResult As AccessSQLService.ArrayOfXElement, ByVal queryParam As Boolean)
            MyBase.New
            Me.querySqlResult = querySqlResult
            Me.queryParam = queryParam
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface IServiceChannel
        Inherits AccessSQLService.IService, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class ServiceClient
        Inherits System.ServiceModel.ClientBase(Of AccessSQLService.IService)
        Implements AccessSQLService.IService
        
        ''' <summary>
        ''' Implement this partial method to configure the service endpoint.
        ''' </summary>
        ''' <param name="serviceEndpoint">The endpoint to configure</param>
        ''' <param name="clientCredentials">The client credentials</param>
        Partial Private Shared Sub ConfigureEndpoint(ByVal serviceEndpoint As System.ServiceModel.Description.ServiceEndpoint, ByVal clientCredentials As System.ServiceModel.Description.ClientCredentials)
        End Sub
        
        Public Sub New()
            MyBase.New(ServiceClient.GetDefaultBinding, ServiceClient.GetDefaultEndpointAddress)
            Me.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString
            ConfigureEndpoint(Me.Endpoint, Me.ClientCredentials)
        End Sub
        
        Public Sub New(ByVal endpointConfiguration As EndpointConfiguration)
            MyBase.New(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
            Me.Endpoint.Name = endpointConfiguration.ToString
            ConfigureEndpoint(Me.Endpoint, Me.ClientCredentials)
        End Sub
        
        Public Sub New(ByVal endpointConfiguration As EndpointConfiguration, ByVal remoteAddress As String)
            MyBase.New(ServiceClient.GetBindingForEndpoint(endpointConfiguration), New System.ServiceModel.EndpointAddress(remoteAddress))
            Me.Endpoint.Name = endpointConfiguration.ToString
            ConfigureEndpoint(Me.Endpoint, Me.ClientCredentials)
        End Sub
        
        Public Sub New(ByVal endpointConfiguration As EndpointConfiguration, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
            Me.Endpoint.Name = endpointConfiguration.ToString
            ConfigureEndpoint(Me.Endpoint, Me.ClientCredentials)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        Public Function querySqlAsync(ByVal request As AccessSQLService.querySqlRequest) As System.Threading.Tasks.Task(Of AccessSQLService.querySqlResponse) Implements AccessSQLService.IService.querySqlAsync
            Return MyBase.Channel.querySqlAsync(request)
        End Function
        
        Public Overridable Function OpenAsync() As System.Threading.Tasks.Task
            Return System.Threading.Tasks.Task.Factory.FromAsync(CType(Me,System.ServiceModel.ICommunicationObject).BeginOpen(Nothing, Nothing), AddressOf CType(Me,System.ServiceModel.ICommunicationObject).EndOpen)
        End Function
        
        Public Overridable Function CloseAsync() As System.Threading.Tasks.Task
            Return System.Threading.Tasks.Task.Factory.FromAsync(CType(Me,System.ServiceModel.ICommunicationObject).BeginClose(Nothing, Nothing), AddressOf CType(Me,System.ServiceModel.ICommunicationObject).EndClose)
        End Function
        
        Private Shared Function GetBindingForEndpoint(ByVal endpointConfiguration As EndpointConfiguration) As System.ServiceModel.Channels.Binding
            If (endpointConfiguration = EndpointConfiguration.BasicHttpBinding_IService) Then
                Dim result As System.ServiceModel.BasicHttpBinding = New System.ServiceModel.BasicHttpBinding()
                result.MaxBufferSize = Integer.MaxValue
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max
                result.MaxReceivedMessageSize = Integer.MaxValue
                result.AllowCookies = true
                Return result
            End If
            Throw New System.InvalidOperationException(String.Format("Could not find endpoint with name '{0}'.", endpointConfiguration))
        End Function
        
        Private Shared Function GetEndpointAddress(ByVal endpointConfiguration As EndpointConfiguration) As System.ServiceModel.EndpointAddress
            If (endpointConfiguration = EndpointConfiguration.BasicHttpBinding_IService) Then
                Return New System.ServiceModel.EndpointAddress("http://localhost:34523/Service.svc")
            End If
            Throw New System.InvalidOperationException(String.Format("Could not find endpoint with name '{0}'.", endpointConfiguration))
        End Function
        
        Private Shared Function GetDefaultBinding() As System.ServiceModel.Channels.Binding
            Return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService)
        End Function
        
        Private Shared Function GetDefaultEndpointAddress() As System.ServiceModel.EndpointAddress
            Return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService)
        End Function
        
        Public Enum EndpointConfiguration
            
            BasicHttpBinding_IService
        End Enum
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute(Nothing, IsAny:=true),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.ServiceReference.Platforms", "11.0.0.0")>  _
    Partial Public Class ArrayOfXElement
        Inherits Object
        Implements System.Xml.Serialization.IXmlSerializable
        
        Private nodesList As System.Collections.Generic.List(Of System.Xml.Linq.XElement) = New System.Collections.Generic.List(Of System.Xml.Linq.XElement)()
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Overridable ReadOnly Property Nodes() As System.Collections.Generic.List(Of System.Xml.Linq.XElement)
            Get
                Return Me.nodesList
            End Get
        End Property
        
        Public Overridable Function GetSchema() As System.Xml.Schema.XmlSchema Implements System.Xml.Serialization.IXmlSerializable.GetSchema
            Throw New System.NotImplementedException()
        End Function
        
        Public Overridable Sub WriteXml(ByVal writer As System.Xml.XmlWriter) Implements System.Xml.Serialization.IXmlSerializable.WriteXml
            Dim e As System.Collections.Generic.IEnumerator(Of System.Xml.Linq.XElement) = nodesList.GetEnumerator

            Do While e.MoveNext
                CType(e.Current,System.Xml.Serialization.IXmlSerializable).WriteXml(writer)

            Loop
        End Sub
        
        Public Overridable Sub ReadXml(ByVal reader As System.Xml.XmlReader) Implements System.Xml.Serialization.IXmlSerializable.ReadXml

            Do While (reader.NodeType <> System.Xml.XmlNodeType.EndElement)
                If (reader.NodeType = System.Xml.XmlNodeType.Element) Then
                    Dim elem As System.Xml.Linq.XElement = New System.Xml.Linq.XElement("default")
                    CType(elem,System.Xml.Serialization.IXmlSerializable).ReadXml(reader)
                    Nodes.Add(elem)
                Else
                    reader.Skip
                End If

            Loop
        End Sub
    End Class
End Namespace
