/****************************** Module Header ******************************\
Module Name:  MainWindow.cs
Project:      EditXPS
Copyright (c) Microsoft Corporation.

XpsDetails is a calss structure to maintain the XPS resoruces in list. 
This helps us to copy the XPS resource and content from the source in 
a structured way.

This source is subject to the Microsoft Public License.
See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
All other rights reserved.

THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
\***************************************************************************/

using System;
using System.Windows;
using System.Windows.Xps.Packaging;
using System.Collections.Generic;
using System.IO;
using System.Xml;


namespace EditXPS
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        #region Declerations

        const string sourceXPS = @"..\..\XPSFiles\TestSample.xps";
        const string destinationXpsPath = @"..\..\XPSFiles\ModifiedFile.xps";
        const string sampleTextToReplace = "XML Paper Specification";

        string newStringToReplace = string.Empty;
        List<XpsDetails> xpsImages = new List<XpsDetails>();
        List<XpsDetails> xpsFonts = new List<XpsDetails>();

        #endregion

        #region Constructor

        /// <summary>
        /// Default constructor.
        /// </summary>
        public MainWindow()
        {
            InitializeComponent();
            LoadXPSFile();

            // Adding default sample text to the textbox for testing purpose.
            tbNewText.Text = sampleTextToReplace;
        }

        #endregion

        #region Events

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            // Reading the string to replace.
            newStringToReplace = tbNewText.Text.Trim();

            if (CreateNewXPSFromSource())
            {
                MessageBox.Show("Edit Completed");
            }

        }        

        #endregion
        
        #region Methods

        private bool CreateNewXPSFromSource()
        {
            bool blnResult = false;

            try
            {
                // Delete the old file generated by our code.
                if (File.Exists(destinationXpsPath))
                    File.Delete(destinationXpsPath);

                // Creating the output XPS file.
                XpsDocument document = new XpsDocument(destinationXpsPath,
                    FileAccess.ReadWrite,
                    System.IO.Packaging.CompressionOption.Maximum);
                IXpsFixedDocumentSequenceWriter docSeqWriter 
                    = document.AddFixedDocumentSequence();

                // Loading the source xps files to list to read them for edit.
                List<string> sourceFiles = new List<string>();
                sourceFiles.Add(sourceXPS);

                // Looping each source files.
                foreach (string sourceFile in sourceFiles)
                {
                    XpsDocument docToRead = new XpsDocument(sourceFile, FileAccess.ReadWrite);
                    IXpsFixedDocumentSequenceReader docSequenceToRead = 
                        docToRead.FixedDocumentSequenceReader;

                    foreach (IXpsFixedDocumentReader fixedDocumentReader in 
                        docSequenceToRead.FixedDocuments)
                    {

                        IXpsFixedDocumentWriter fixedDocumentWriter = 
                            docSeqWriter.AddFixedDocument();

                        AddStructure(fixedDocumentReader, fixedDocumentWriter);

                        foreach (IXpsFixedPageReader fixedPageReader in 
                            fixedDocumentReader.FixedPages)
                        {
                            IXpsFixedPageWriter pageWriter = 
                                fixedDocumentWriter.AddFixedPage();

                            AddImages(fixedPageReader, pageWriter);

                            AddFonts(fixedPageReader, pageWriter);

                            AddContent(fixedPageReader, pageWriter);

                            // Commmit all changes.
                            pageWriter.Commit();

                        }
                        fixedDocumentWriter.Commit();
                    }
                    // Close the current source before openeing next one.
                    docToRead.Close();
                }

                docSeqWriter.Commit();

                // Show the modified content in a DocumentViewer.
                dvModifiedXPS.Document = document.GetFixedDocumentSequence();
                ModifiedGrid.Visibility = System.Windows.Visibility.Visible;

                // Close newly created XPS document.
                document.Close();
                blnResult = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

            return blnResult;
        }        

        /// <summary>
        /// Add content from source to new XPS.
        /// </summary>
        /// <param name="fixedPageReader"></param>
        /// <param name="pageWriter"></param>
        private void AddContent(
            IXpsFixedPageReader fixedPageReader, 
            IXpsFixedPageWriter pageWriter)
        {
            XmlDocument xmlDoc = new XmlDocument();

            // Loading XPS content.
            xmlDoc.Load(fixedPageReader.XmlReader);

            // Find and replace text to edit the XPS.
            EditXPSContent(xmlDoc.ChildNodes);

            // Writing the modified XML content to a new XPS doc.
            xmlDoc.Save(pageWriter.XmlWriter);
        }

        /// <summary>
        /// Add fonts from source to new XPS.
        /// </summary>
        /// <param name="fixedPageReader"></param>
        /// <param name="pageWriter"></param>
        private void AddFonts(
            IXpsFixedPageReader fixedPageReader, 
            IXpsFixedPageWriter pageWriter)
        {
            // Adding font from source to resources.
            foreach (XpsFont font in fixedPageReader.Fonts)
            {
                if (!CheckIfFontAddedAlready(font.Uri.ToString()))
                {
                    XpsFont newFont = pageWriter.AddFont(false);

                    using (Stream dstFontStream = newFont.GetStream())
                    {
                        using (Stream srcFontStream = font.GetStream())
                        {
                            if (font.IsObfuscated)
                            {
                                WriteObfuscatedStream(font.Uri.ToString(), 
                                    dstFontStream, srcFontStream);
                            }
                            else
                            {
                                WriteToStream(dstFontStream, srcFontStream);
                            }
                            newFont.Commit();
                            XpsDetails xpsFont = new XpsDetails();
                            xpsFont.resource = newFont;
                            xpsFont.sourceURI = font.Uri;
                            xpsFont.destURI = newFont.Uri;
                            xpsFonts.Add(xpsFont);
                        }
                    }
                }

            }
        }

        /// <summary>
        /// Add images from source to new XPS.
        /// </summary>
        /// <param name="fixedPageReader"></param>
        /// <param name="pageWriter"></param>
        private void AddImages(
            IXpsFixedPageReader fixedPageReader, 
            IXpsFixedPageWriter pageWriter)
        {
            // Adding images to resources.
            foreach (XpsImage image in fixedPageReader.Images)
            {
                XpsImage newImage = null;

                // Getting the URI to check the image extension.
                string sourceExt = image.Uri.ToString().ToLower();


                if (sourceExt.Contains(ImageType.PNG))
                {
                    newImage = pageWriter.AddImage(XpsImageType.PngImageType);
                }
                else if (sourceExt.Contains(ImageType.JPG) || 
                    sourceExt.Contains(ImageType.JPEG))
                {
                    newImage = pageWriter.AddImage(XpsImageType.JpegImageType);
                }
                else if (sourceExt.Contains(ImageType.TIF) || 
                    sourceExt.Contains(ImageType.TIFF))
                {
                    newImage = pageWriter.AddImage(XpsImageType.TiffImageType);
                }
                else if (sourceExt.Contains(ImageType.WDP))
                {
                    newImage = pageWriter.AddImage(XpsImageType.WdpImageType);
                }
                else
                {
                    newImage = null;
                }

                if (null != newImage)
                {
                    using (Stream dstImageStream = newImage.GetStream())
                    {
                        using (Stream srcImageStream = image.GetStream())
                        {
                            CopyStream(srcImageStream, dstImageStream);
                            newImage.Commit();
                            XpsDetails xpsImage = new XpsDetails();
                            xpsImage.resource = newImage;
                            xpsImage.sourceURI = image.Uri;
                            xpsImage.destURI = newImage.Uri;
                            xpsImages.Add(xpsImage);
                        }
                    }
                }

            }
        }

        /// <summary>
        /// Add the structure of source XPS to new XPS.
        /// </summary>
        /// <param name="fixedDocumentReader"></param>
        /// <param name="fixedDocumentWriter"></param>
        private static void AddStructure(
            IXpsFixedDocumentReader fixedDocumentReader,
            IXpsFixedDocumentWriter fixedDocumentWriter)
        {
            XpsStructure Structure = fixedDocumentReader.DocumentStructure;
            if (Structure != null)
            {
                XpsStructure myStructure = 
                    fixedDocumentWriter.AddDocumentStructure();

                using (Stream destStream = myStructure.GetStream())
                {
                    using (Stream sourceStream = Structure.GetStream())
                    {
                        CopyStream(sourceStream, destStream);
                        myStructure.Commit();
                    }
                }
            }
        }        

        /// <summary>
        /// Load the test XPS to DocumentViewer.
        /// </summary>
        private void LoadXPSFile()
        {
            XpsDocument document = new XpsDocument(sourceXPS, 
                System.IO.FileAccess.Read);
            dvSampleXPS.Document = document.GetFixedDocumentSequence();
            document.Close();
        }

        /// <summary>
        /// Copying Font as stream from source to new stream 
        /// to be used in the new XPS file.
        /// </summary>
        /// <param name="destStream">Destination Stream to be copied to.</param>
        /// <param name="sourceStream">Source stream to be copied from.</param>
        private void WriteToStream(
            Stream destStream, 
            Stream sourceStream)
        {
            const int bufSize = 0x1000;
            byte[] buf = new byte[bufSize];
            int bytesRead = 0;

            while ((bytesRead = sourceStream.Read(buf, 0, bufSize)) > 0)
            {
                destStream.Write(buf, 0, bytesRead);
            }

        }

        /// <summary>
        /// If font is Obfuscated, then we use this method to 
        /// create read Obfuscated stream.
        /// </summary>
        /// <param name="resourceName">Font's URI</param>
        /// <param name="destStream"></param>
        /// <param name="sourceStream"></param>
        private void WriteObfuscatedStream(
            string resourceName, 
            Stream destStream, 
            Stream sourceStream)
        {
            int bufSize = 0x1000;
            int guidByteSize = 16;
            int obfuscatedByte = 32;

            // Get the GUID byte from the resource name.  Typical Font name:
            //    /Resources/Fonts/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.ODTTF
            int startPos = resourceName.LastIndexOf('/') + 1;
            int length = resourceName.LastIndexOf('.') - startPos;
            resourceName = resourceName.Substring(startPos, length);

            Guid guid = new Guid(resourceName);

            string guidString = guid.ToString("N");

            // Parsing the guid string and coverted into byte value
            byte[] guidBytes = new byte[guidByteSize];
            for (int i = 0; i < guidBytes.Length; i++)
            {
                guidBytes[i] = Convert.ToByte(guidString.Substring(i * 2, 2), 16);
            }

            
            // XOR the first 32 bytes of the source
            // resource stream with GUID byte.
            byte[] buf = new byte[obfuscatedByte];
            sourceStream.Read(buf, 0, obfuscatedByte);

            for (int i = 0; i < obfuscatedByte; i++)
            {
                int guidBytesPos = guidBytes.Length - (i % guidBytes.Length) - 1;
                buf[i] ^= guidBytes[guidBytesPos];
            }
            destStream.Write(buf, 0, obfuscatedByte);

            // copy remaining stream from source without obfuscation
            buf = new byte[bufSize];

            int bytesRead = 0;
            while ((bytesRead = sourceStream.Read(buf, 0, bufSize)) > 0)
            {
                destStream.Write(buf, 0, bytesRead);
            }
            //}
        }

        /// <summary>
        /// Method where we can specify the text we need to edit.
        /// </summary>
        /// <param name="childNodes"></param>
        private void EditXPSContent(XmlNodeList childNodes)
        {
            int maxvalue = childNodes.Count;
            for (int i = 0; i < maxvalue; i++)
            {
                XmlNode node = childNodes[i];

                if (node.HasChildNodes)
                {
                    EditXPSContent(node.ChildNodes);
                }

                if (node.NodeType == XmlNodeType.Element)
                {
                    if (node.Name == "Glyphs")
                    {
                        foreach (XmlAttribute attribute in node.Attributes)
                        {
                            if (attribute.Name == "UnicodeString")
                            {
                                //Compare String and replace.
                                if (attribute.Value.Contains("XPS"))
                                {
                                    node.Attributes["UnicodeString"].Value =
                                    node.Attributes["UnicodeString"].Value.Replace(
                                    "XPS", newStringToReplace);
                                        //= newStringToReplace;

                                    node.Attributes["Indices"].Value = "";
                                }                               
                            }

                            if (attribute.Name == "FontUri")
                            {
                                node.Attributes["FontUri"].Value = GetNewFontUri(
                                    attribute.Value);
                            }
                        }
                    }
                    else if (node.Name == "ImageBrush")
                    {
                        foreach (XmlAttribute attribute in node.Attributes)
                        {
                            if (attribute.Name == "ImageSource")
                            {
                                // Get the uri of image added to resource.
                                attribute.Value = GetNewImageUri(attribute.Value);
                            }
                        }
                    }

                }
            }
        }

        /// <summary>
        /// Get the newly created Font URI.
        /// </summary>
        /// <param name="oldUri">
        /// URI of the font from where this font stream was generated.
        /// </param>
        /// <returns>FontURI</returns>
        private string GetNewFontUri(string oldUri)
        {
            string result = string.Empty;
            foreach (XpsDetails data in xpsFonts)
            {
                if (data.sourceURI.ToString() == oldUri.ToString())
                {
                    result = data.destURI.ToString();
                }
            }
            return result;
        }

        /// <summary>
        /// Get the newly created Image URI.
        /// </summary>
        /// <param name="oldUri">
        /// URI of the Image from where this image was generated.
        /// </param>
        /// <returns>ImageURI</returns>
        private string GetNewImageUri(string oldUri)
        {
            string result = string.Empty;
            foreach (XpsDetails data in xpsImages)
            {
                if (data.sourceURI.ToString() == oldUri.ToString())
                {
                    result = data.destURI.ToString();
                }
            }
            return result;
        }

        /// <summary>
        /// Return uri of font to display numbers.
        /// </summary>
        /// <returns>FontURI</returns>
        private string GetNumFontUri()
        {
            string uri = string.Empty;
            foreach (XpsDetails dat in xpsFonts)
            {
                if (dat.sourceURI.ToString() == dat.destURI.ToString())
                {
                    uri = dat.destURI.ToString();
                    break;
                }
            }
            return uri;
        }

        /// <summary>
        /// Check if the same font is already created before creating new one.
        /// </summary>
        /// <param name="uri"></param>
        /// <returns></returns>
        private bool CheckIfFontAddedAlready(string uri)
        {
            bool IsFontAdded = false;

            foreach (XpsDetails data in xpsFonts)
            {
                if (data.sourceURI.ToString() == uri)
                {
                    IsFontAdded = true;
                }
            }

            return IsFontAdded;
        }

        private static Int32 CopyStream(
            Stream sourceStream, 
            Stream destStream)
        {
            const int size = 64 * 1024; 
            byte[] localBuffer = new byte[size];
            int bytesRead;
            Int32 bytesMoved = 0;
            sourceStream.Seek(0, SeekOrigin.Begin);
            destStream.Seek(0, SeekOrigin.Begin);
            while ((bytesRead = sourceStream.Read(localBuffer, 0, size)) > 0)
            {
                destStream.Write(localBuffer, 0, bytesRead);
                bytesMoved += bytesRead;
            }
            return bytesMoved;
        }

        #endregion

    }

    public static class ImageType
    {
        public static string PNG = ".png";
        public static string JPG = ".jpg";
        public static string JPEG = ".jpeg";
        public static string TIF = ".tif";
        public static string TIFF = ".tiff";
        public static string WDP = ".wdp";

    }

}
