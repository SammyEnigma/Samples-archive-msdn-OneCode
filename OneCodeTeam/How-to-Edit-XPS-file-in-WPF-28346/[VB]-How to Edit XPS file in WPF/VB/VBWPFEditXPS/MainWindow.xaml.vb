'***************************** Module Header *******************************\
' Module Name:  MainWindow.vb
' Project:      EditXPS
' Copyright (c) Microsoft Corporation.
' 
' XpsDetails is a calss structure to maintain the XPS resoruces in list. 
' This helps us to copy the XPS resource and content from the source in 
' structured way.
' 
' This source is subject to the Microsoft Public License.
' See http://www.microsoft.com/en-us/openness/licenses.aspx#MPL.
' All other rights reserved.
' 
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED 
' WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
'***************************************************************************/

Imports System
Imports System.Windows
Imports System.Windows.Xps.Packaging
Imports System.Collections.Generic
Imports System.IO
Imports System.Xml

Class MainWindow

#Region "Declerations"

    Const sourceXPS As String = "..\..\XPSFiles\TestSample.xps"
    Const destinationXpsPath As String = "..\..\XPSFiles\ModifiedFile.xps"
    Const sampleTextToReplace As String = "XML Paper Specification"

    Dim newStringToReplace As String = String.Empty
    Dim xpsImages As New List(Of XpsDetails)()
    Dim xpsFonts As New List(Of XpsDetails)()

#End Region

#Region "Events"

    Private Sub btnSave_Click(sender As Object, e As RoutedEventArgs)
        newStringToReplace = tbNewText.Text.Trim

        If CreateNewXPSFromSource() Then
            MessageBox.Show("Edit Completed")
        End If
    End Sub

#End Region

#Region "Constructor"

    ''' <summary>
    ''' Default constructor.
    ''' </summary>
    Public Sub New()
        InitializeComponent()
        LoadXPSFile()

        ' Adding default sample text to the textbox for testing purpose.
        tbNewText.Text = sampleTextToReplace
    End Sub

#End Region

#Region "Methods"

    Private Function CreateNewXPSFromSource() As Boolean
        Dim blnResult As Boolean = False

        Try
            ' Delete the old file generated by our code.
            If File.Exists(destinationXpsPath) Then
                File.Delete(destinationXpsPath)
            End If

            ' Creating the output XPS file.
            Dim document As New XpsDocument(destinationXpsPath, FileAccess.ReadWrite, System.IO.Packaging.CompressionOption.Maximum)
            Dim docSeqWriter As IXpsFixedDocumentSequenceWriter = document.AddFixedDocumentSequence()

            ' Loading the source xps files to list to read them for edit.
            Dim sourceFiles As New List(Of String)()
            sourceFiles.Add(sourceXPS)

            ' Looping each source files.
            For Each sourceFile As String In sourceFiles
                Dim docToRead As New XpsDocument(sourceFile, FileAccess.ReadWrite)
                Dim docSequenceToRead As IXpsFixedDocumentSequenceReader = docToRead.FixedDocumentSequenceReader

                For Each fixedDocumentReader As IXpsFixedDocumentReader In docSequenceToRead.FixedDocuments

                    Dim fixedDocumentWriter As IXpsFixedDocumentWriter = docSeqWriter.AddFixedDocument()

                    AddStructure(fixedDocumentReader, fixedDocumentWriter)

                    For Each fixedPageReader As IXpsFixedPageReader In fixedDocumentReader.FixedPages
                        Dim pageWriter As IXpsFixedPageWriter = fixedDocumentWriter.AddFixedPage()

                        AddImages(fixedPageReader, pageWriter)

                        AddFonts(fixedPageReader, pageWriter)

                        AddContent(fixedPageReader, pageWriter)

                        ' Commmit all changes.

                        pageWriter.Commit()
                    Next
                    fixedDocumentWriter.Commit()
                Next
                ' Close the current source before openeing next one.
                docToRead.Close()
            Next

            docSeqWriter.Commit()

            ' Show the modified content in a DocumentViewer.
            dvModifiedXPS.Document = document.GetFixedDocumentSequence()
            ModifiedGrid.Visibility = System.Windows.Visibility.Visible

            ' Close newly created XPS document.
            document.Close()
            blnResult = True
        Catch ex As Exception

            MessageBox.Show(ex.Message)
        End Try

        Return blnResult
    End Function

    ''' <summary>
    ''' Add content from source to new XPS.
    ''' </summary>
    ''' <param name="fixedPageReader"></param>
    ''' <param name="pageWriter"></param>
    Private Sub AddContent(fixedPageReader As IXpsFixedPageReader, pageWriter As IXpsFixedPageWriter)
        Dim xmlDoc As New XmlDocument()

        ' Loading XPS content
        xmlDoc.Load(fixedPageReader.XmlReader)

        ' Find and replace text to edit the XPS.
        EditXPSContent(xmlDoc.ChildNodes)

        ' Writing the modified XML content to a new XPS doc.
        xmlDoc.Save(pageWriter.XmlWriter)
    End Sub

    ''' <summary>
    ''' Add fonts from source to new XPS.
    ''' </summary>
    ''' <param name="fixedPageReader"></param>
    ''' <param name="pageWriter"></param>
    Private Sub AddFonts(fixedPageReader As IXpsFixedPageReader, pageWriter As IXpsFixedPageWriter)
        ' Adding font from source to resources.
        For Each font As XpsFont In fixedPageReader.Fonts
            If Not CheckIfFontAddedAlready(font.Uri.ToString()) Then
                Dim newFont As XpsFont = pageWriter.AddFont(False)

                Using dstFontStream As Stream = newFont.GetStream()
                    Using srcFontStream As Stream = font.GetStream()
                        If font.IsObfuscated Then
                            WriteObfuscatedStream(font.Uri.ToString(), dstFontStream, srcFontStream)
                        Else
                            WriteToStream(dstFontStream, srcFontStream)
                        End If
                        newFont.Commit()
                        Dim xpsFont As New XpsDetails()
                        xpsFont.resource = newFont
                        xpsFont.sourceURI = font.Uri
                        xpsFont.destURI = newFont.Uri
                        xpsFonts.Add(xpsFont)
                    End Using
                End Using

            End If
        Next
    End Sub

    ''' <summary>
    ''' Add images from source to new XPS.
    ''' </summary>
    ''' <param name="fixedPageReader"></param>
    ''' <param name="pageWriter"></param>
    Private Sub AddImages(fixedPageReader As IXpsFixedPageReader, pageWriter As IXpsFixedPageWriter)
        ' Adding images to resources.
        For Each image As XpsImage In fixedPageReader.Images
            Dim newImage As XpsImage = Nothing

            ' Getting the URI to check the image extension.
            Dim sourceExt As String = image.Uri.ToString().ToLower()


            If sourceExt.Contains(ImageType.PNG) Then
                newImage = pageWriter.AddImage(XpsImageType.PngImageType)
            ElseIf sourceExt.Contains(ImageType.JPG) OrElse sourceExt.Contains(ImageType.JPEG) Then
                newImage = pageWriter.AddImage(XpsImageType.JpegImageType)
            ElseIf sourceExt.Contains(ImageType.TIF) OrElse sourceExt.Contains(ImageType.TIFF) Then
                newImage = pageWriter.AddImage(XpsImageType.TiffImageType)
            ElseIf sourceExt.Contains(ImageType.WDP) Then
                newImage = pageWriter.AddImage(XpsImageType.WdpImageType)
            Else
                newImage = Nothing
            End If

            If newImage IsNot Nothing Then
                Using dstImageStream As Stream = newImage.GetStream()
                    Using srcImageStream As Stream = image.GetStream()
                        CopyStream(srcImageStream, dstImageStream)
                        newImage.Commit()
                        Dim xpsImage As New XpsDetails()
                        xpsImage.resource = newImage
                        xpsImage.sourceURI = image.Uri
                        xpsImage.destURI = newImage.Uri
                        xpsImages.Add(xpsImage)
                    End Using
                End Using

            End If
        Next
    End Sub

    ''' <summary>
    ''' Add the structure of source XPS to new XPS.
    ''' </summary>
    ''' <param name="fixedDocumentReader"></param>
    ''' <param name="fixedDocumentWriter"></param>
    Private Shared Sub AddStructure(fixedDocumentReader As IXpsFixedDocumentReader, fixedDocumentWriter As IXpsFixedDocumentWriter)
        Dim [Structure] As XpsStructure = fixedDocumentReader.DocumentStructure
        If [Structure] IsNot Nothing Then
            Dim myStructure As XpsStructure = fixedDocumentWriter.AddDocumentStructure()

            Using destStream As Stream = myStructure.GetStream()
                Using sourceStream As Stream = [Structure].GetStream()
                    CopyStream(sourceStream, destStream)
                    myStructure.Commit()
                End Using
            End Using
        End If
    End Sub

    ''' <summary>
    ''' Load the test XPS to DocumentViewer.
    ''' </summary>
    Private Sub LoadXPSFile()
        Dim document As New XpsDocument(sourceXPS, System.IO.FileAccess.Read)
        dvSampleXPS.Document = document.GetFixedDocumentSequence()
        document.Close()
    End Sub

    ''' <summary>
    ''' Copying Font as stream from source to new stream 
    ''' to be used in the new XPS file.
    ''' </summary>
    ''' <param name="destStream">Destination Stream to be copied to.</param>
    ''' <param name="sourceStream">Source stream to be copied from.</param>
    Private Sub WriteToStream(destStream As Stream, sourceStream As Stream)
        Const bufSize As Integer = &H1000
        Dim buf As Byte() = New Byte(bufSize - 1) {}
        Dim bytesRead As Integer = 0

        While (InlineAssignHelper(bytesRead, sourceStream.Read(buf, 0, bufSize))) > 0
            destStream.Write(buf, 0, bytesRead)
        End While

    End Sub

    ''' <summary>
    ''' If font is Obfuscated, then we use this method to 
    ''' create read Obfuscated stream.
    ''' </summary>
    ''' <param name="resourceName">Font's URI</param>
    ''' <param name="destStream"></param>
    ''' <param name="sourceStream"></param>
    Private Sub WriteObfuscatedStream(resourceName As String, destStream As Stream, sourceStream As Stream)
        Dim bufSize As Integer = &H1000
        Dim guidByteSize As Integer = 16
        Dim obfuscatedByte As Integer = 32

        ' Get the GUID byte from the resource name.  Typical Font name:
        '    /Resources/Fonts/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.ODTTF
        Dim startPos As Integer = resourceName.LastIndexOf("/"c) + 1
        Dim length As Integer = resourceName.LastIndexOf("."c) - startPos
        resourceName = resourceName.Substring(startPos, length)

        Dim guid As New Guid(resourceName)

        Dim guidString As String = guid.ToString("N")

        ' Parsing the guid string and coverted into byte value
        Dim guidBytes As Byte() = New Byte(guidByteSize - 1) {}
        For i As Integer = 0 To guidBytes.Length - 1
            guidBytes(i) = Convert.ToByte(guidString.Substring(i * 2, 2), 16)
        Next


        ' XOR the first 32 bytes of the source
        ' resource stream with GUID byte.
        Dim buf As Byte() = New Byte(obfuscatedByte - 1) {}
        sourceStream.Read(buf, 0, obfuscatedByte)

        For i As Integer = 0 To obfuscatedByte - 1
            Dim guidBytesPos As Integer = guidBytes.Length - (i Mod guidBytes.Length) - 1
            buf(i) = buf(i) Xor guidBytes(guidBytesPos)
        Next
        destStream.Write(buf, 0, obfuscatedByte)

        ' copy remaining stream from source without obfuscation
        buf = New Byte(bufSize - 1) {}

        Dim bytesRead As Integer = 0
        While (InlineAssignHelper(bytesRead, sourceStream.Read(buf, 0, bufSize))) > 0
            destStream.Write(buf, 0, bytesRead)
        End While
        '}
    End Sub

    ''' <summary>
    ''' Method where we can specify the text we need to edit.
    ''' </summary>
    ''' <param name="childNodes"></param>
    Private Sub EditXPSContent(childNodes As XmlNodeList)
        Dim maxvalue As Integer = childNodes.Count
        For i As Integer = 0 To maxvalue - 1
            Dim node As XmlNode = childNodes(i)

            If node.HasChildNodes Then
                EditXPSContent(node.ChildNodes)
            End If

            If node.NodeType = XmlNodeType.Element Then
                If node.Name = "Glyphs" Then
                    For Each attribute As XmlAttribute In node.Attributes
                        If attribute.Name = "UnicodeString" Then
                            'Compare String and replace.
                            If attribute.Value.Contains("XPS") Then
                                node.Attributes("UnicodeString").Value = node.Attributes("UnicodeString").Value.Replace("XPS", newStringToReplace)
                                '= newStringToReplace;

                                node.Attributes("Indices").Value = ""
                            End If
                        End If

                        If attribute.Name = "FontUri" Then
                            node.Attributes("FontUri").Value = GetNewFontUri(attribute.Value)
                        End If
                    Next
                ElseIf node.Name = "ImageBrush" Then
                    For Each attribute As XmlAttribute In node.Attributes
                        If attribute.Name = "ImageSource" Then
                            ' Get the uri of image added to resource.
                            attribute.Value = GetNewImageUri(attribute.Value)
                        End If
                    Next

                End If
            End If
        Next
    End Sub

    ''' <summary>
    ''' Get the newly created Font URI.
    ''' </summary>
    ''' <param name="oldUri">
    ''' URI of the font from where this font stream was generated.
    ''' </param>
    ''' <returns>FontURI</returns>
    Private Function GetNewFontUri(oldUri As String) As String
        Dim result As String = String.Empty
        For Each data As XpsDetails In xpsFonts
            If data.sourceURI.ToString() = oldUri.ToString() Then
                result = data.destURI.ToString()
            End If
        Next
        Return result
    End Function

    ''' <summary>
    ''' Get the newly created Image URI.
    ''' </summary>
    ''' <param name="oldUri">
    ''' URI of the Image from where this image was generated.
    ''' </param>
    ''' <returns>ImageURI</returns>
    Private Function GetNewImageUri(oldUri As String) As String
        Dim result As String = String.Empty
        For Each data As XpsDetails In xpsImages
            If data.sourceURI.ToString() = oldUri.ToString() Then
                result = data.destURI.ToString()
            End If
        Next
        Return result
    End Function

    ''' <summary>
    ''' Return uri of font to display numbers.
    ''' </summary>
    ''' <returns>FontURI</returns>
    Private Function GetNumFontUri() As String
        Dim uri As String = String.Empty
        For Each dat As XpsDetails In xpsFonts
            If dat.sourceURI.ToString() = dat.destURI.ToString() Then
                uri = dat.destURI.ToString()
                Exit For
            End If
        Next
        Return uri
    End Function

    ''' <summary>
    ''' Check if the same font is already created before creating new one.
    ''' </summary>
    ''' <param name="uri"></param>
    ''' <returns></returns>
    Private Function CheckIfFontAddedAlready(uri As String) As Boolean
        Dim IsFontAdded As Boolean = False

        For Each data As XpsDetails In xpsFonts
            If data.sourceURI.ToString() = uri Then
                IsFontAdded = True
            End If
        Next

        Return IsFontAdded
    End Function

    Private Shared Function CopyStream(sourceStream As Stream, destStream As Stream) As Int32
        Const size As Integer = 64 * 1024
        Dim localBuffer As Byte() = New Byte(size - 1) {}
        Dim bytesRead As Integer
        Dim bytesMoved As Int32 = 0
        sourceStream.Seek(0, SeekOrigin.Begin)
        destStream.Seek(0, SeekOrigin.Begin)
        While (InlineAssignHelper(bytesRead, sourceStream.Read(localBuffer, 0, size))) > 0
            destStream.Write(localBuffer, 0, bytesRead)
            bytesMoved += bytesRead
        End While
        Return bytesMoved
    End Function

    Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, value As T) As T
        target = value
        Return value
    End Function


#End Region



End Class


Public NotInheritable Class ImageType
    Private Sub New()
    End Sub
    Public Shared PNG As String = ".png"
    Public Shared JPG As String = ".jpg"
    Public Shared JPEG As String = ".jpeg"
    Public Shared TIF As String = ".tif"
    Public Shared TIFF As String = ".tiff"
    Public Shared WDP As String = ".wdp"

End Class