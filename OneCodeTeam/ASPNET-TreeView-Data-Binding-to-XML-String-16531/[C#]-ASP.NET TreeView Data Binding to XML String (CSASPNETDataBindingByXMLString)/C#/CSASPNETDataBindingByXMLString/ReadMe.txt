========================================================================
                 CSASPNETDataBindingByXMLString Overview
========================================================================

/////////////////////////////////////////////////////////////////////////////
Use:

This code-sample demonstrates how to bind TreeView by using an XML string
variable. The web application converts XML string to XML object and binds
data to TreeView's nodes, the TreeViewBind() method supports binding with
multilayer structure of XML object via recursion algorithm.

/////////////////////////////////////////////////////////////////////////////
Demo the Sample. 

Please follow these demonstration steps below.

Step 1: Open the CSASPNETDataBindingByXMLString.sln.

Step 2: Expand the CSASPNETDataBindingByXMLString web application and press 
        Ctrl + F5 to show the Default.aspx page.

Step 3: You will see a TreeView control on the page, please compare TreeView
        nodes with the XML string which generated by XmlData class.

Step 5: You can also modify this XML string, note new nodes need contain a 
        property named "name", the name property will bind to the TreeView's
		nodes text.

Step 6: Validation finished.

/////////////////////////////////////////////////////////////////////////////
Code Logical:

Step 1. Create a C# "ASP.NET Empty Web Application" in Visual Studio 2010 or
        Visual Web Developer 2010. Name it as "CSASPNETDataBindingByXMLString".

Step 2. Add one web form and named it as "Default.aspx".

Step 3. Create a ASP.NET folder named "App_Code", create an "XmlNode" class file.
        This class provide a method that return an XML string. The XML string 
		need follow XML syntax and has two properties, "name" and "id".

		The XML string will be like this:
		[code]
		public string GetXmlString()
        {
            // XML data string.
            string strXml= @"
            <Nodes>
            <ParentNode name=""paNode1"" id=""1"">
            <ChildNode name=""chNode11"" id=""11"">
            <Level2ChildNode name=""Level2chNode111"" id=""111""></Level2ChildNode>
            <Level2ChildNode name=""Level2chNode112"" id=""112""></Level2ChildNode>
            </ChildNode>
            <ChildNode name=""chNode12"" id=""12""></ChildNode>
            <ChildNode name=""chNode13"" id=""13""></ChildNode>
            </ParentNode>
            <ParentNode name=""paNode2"" id=""2"">
            <ChildNode name=""chNode21"" id=""21""></ChildNode>
            <ChildNode name=""chNode22"" id=""22""></ChildNode>
            <ChildNode name=""chNode23"" id=""23""></ChildNode>
            </ParentNode>
            <ParentNode name=""paNode3"" id=""3"">
            <ChildNode name=""chNode31"" id=""31""></ChildNode>
            <ChildNode name=""chNode32"" id=""32""></ChildNode>
            <ChildNode name=""chNode33"" id=""33""></ChildNode>
            </ParentNode>
            </Nodes>";
            return strXml;
        }
		[/code]

Step 4. Add a TreeView on Default.aspx page, you do not need edit HTML code,
        just show web form's .cs file and add C# code as follows:  

		The Default.aspx.cs include three methods, TreeViewBind(), AddChildNode(),
		and GetXmlStringEvent().
		[code]
        XmlData data;
        protected void Page_Load(object sender, EventArgs e)
        {
            this.TreeViewBind();
        }

        /// <summary>
        /// TreeViewBind() method, is use to load an XML string via XmlDocument
        /// object, and convert it to XML Object. Binding object to TreeView
        /// data source.
        /// </summary>
        private void TreeViewBind()
        {
            try
            {
                XmlDocument document = new XmlDocument();
                string strXmlString = this.GetXmlStringEvent();
                document.LoadXml(strXmlString);
                XmlNode nodeXml = document.DocumentElement;
                TreeNode nodeTree = null;
                foreach (XmlNode node in nodeXml.ChildNodes)
                {
                    nodeTree = new TreeNode();
                    XmlElement elementXml = (XmlElement)node;
                    nodeTree.Text = elementXml.GetAttribute("name").ToString();
                    this.AddChildNode(nodeTree, node);
                    this.tvwTreeView.Nodes.Add(nodeTree);
                }
            }
            catch (XmlException xmlEx)
            {
                Response.Write("XML string errors, please check your XmlData class.<br />");
                Response.Write(xmlEx.Message);
                tvwTreeView.Nodes.Clear();
            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
                tvwTreeView.Nodes.Clear();
            }
        } 
		
        /// <summary>
        /// This method is use to add child nodes to the TreeView nodes via 
        /// recursion algorithm. 
        /// </summary>
        /// <param name="nodeParent"></param>
        /// <param name="node"></param>
        private void AddChildNode(TreeNode nodeParent, XmlNode node)
        {
            TreeNode nodeTreeChild = null;
            foreach (XmlNode nodeChild in node.ChildNodes)
            {
                if (node.ChildNodes.Count == 0)
                {
                    nodeParent.ChildNodes.Add(nodeTreeChild);
                }
                else
                {
                    nodeTreeChild = new TreeNode();
                    XmlElement elementChild = (XmlElement)nodeChild;
                    nodeTreeChild.Text = elementChild.GetAttribute("name").ToString();
                    this.AddChildNode(nodeTreeChild, nodeChild);
                    nodeParent.ChildNodes.Add(nodeTreeChild);
                }
            }
        }

        /// <summary>
        /// Get XML string.
        /// </summary>
        /// <returns></returns>
        private string GetXmlStringEvent()
        {
            data = new XmlData();
            string strXmlString = data.GetXmlString();
            return strXmlString;
        }
	    [/code]

Step 5. Modify the XML string, you can add, edit, remove the XML nodes to test
        this code-sample, but remember your new XML string need follow XML syntax.

Step 6. Build the application and you can debug it.
/////////////////////////////////////////////////////////////////////////////
References:

MSDN: JQuery
http://wiki.asp.net/page.aspx/1047/jquery/

MSDN: GridView Class
http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.gridview.aspx
/////////////////////////////////////////////////////////////////////////////