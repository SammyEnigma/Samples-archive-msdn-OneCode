<Application
    x:Class="VBWindowsStoreAppAdaptToResolutionGridView.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:VBWindowsStoreAppAdaptToResolutionGridView"
    RequestedTheme="Light">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>

                <!-- 
                    Styles that define common aspects of the platform look and feel
                    Required by Visual Studio project and item templates
                 -->
                <ResourceDictionary Source="Common/StandardStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <x:String x:Key="AppLogo">Windows Store Code Samples by All-In-One Code Framework</x:String>
            <x:String x:Key="AppName">How to create a custom GridView which can automatically adapt to different resolutions</x:String>
            <x:String x:Key="AppDescription">
                This sample demonstrates how to create a custom GridView which can automatically adapt to different resolutions. 
                Independent of resolutions, the GridViewItems will be displayed from left to right and when hit screen edge,
                they will automatically be displayed in the next row, you don't have to set a max number of items. Please use Visual Studio Simulator
                to check the effect.
            </x:String>

            <Style x:Key="AppHeaderStyle" TargetType="TextBlock" BasedOn="{StaticResource HeaderTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
                <Setter Property="Margin" Value="0,10,0,10"></Setter>
            </Style>

            <Style x:Key="AppLogoStyle" TargetType="TextBlock" BasedOn="{StaticResource TitleTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
            </Style>

            <Style x:Key="AppDescriptionStyle" TargetType="TextBlock" BasedOn="{StaticResource SubheaderTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
                <Setter Property="Margin" Value="0,10,0,10"></Setter>
            </Style>

            <Style x:Key="AppBodyTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BodyTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
            </Style>

            <Style x:Key="AppFooterStyle" TargetType="TextBlock" BasedOn="{StaticResource CaptionTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"></Setter>
            </Style>


        </ResourceDictionary>
    </Application.Resources>
</Application>
