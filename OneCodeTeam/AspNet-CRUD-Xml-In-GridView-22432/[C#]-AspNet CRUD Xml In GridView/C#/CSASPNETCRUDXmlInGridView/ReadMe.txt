========================================================================
 ASP.NET APPLICATION : CSASPNETCRUDXmlInGridView Project Overview
========================================================================

/////////////////////////////////////////////////////////////////////////////

Summary:

  The project shows up how to edit/insert/update data based on an xml file.

/////////////////////////////////////////////////////////////////////////////

Demo:

  Open the sample project and run the application, You can edit or delete 
  the specific rows by clicking the linkbuttons inside the GridView, or 
  insert data by filling in the TextBoxes and clicking Insert button.

/////////////////////////////////////////////////////////////////////////////

Code Logic:

Step1. Open your Visual Studio 2000 Ultimate/Express or other related version 
to create a C sharp Web application by choosing "File" -> "New" -> "Project...", 
expand the "Visual C#" tag and select "Web", then choose "ASP.NET Web Application".
Please name it as "CSASPNetCRUDXmlInGridView" and switch "Solution" 
dropdownlist to "Create new solution", in the end check the checkbox "Create
directory for solution" and press OK button to create the solution.

[ NOTE: You can also download the free Visual studio 2010 Express ISO package and install Visual C#
 http://download.microsoft.com/download/1/E/5/1E5F1C0A-0D5B-426A-A603-1798B951DDAE/VS2010Express1.iso]
 
Step2. Delete the following default folders and files created automatically 
by Visual Studio.

    Account folder
    Script folder
    Style folder
    About.aspx file
    Global.asax file
    Default.aspx file

Step3. Create a Default.aspx in the proj and drag and drop a GridViews onto the page, 
set integrated CSS style "Brown Suger", set "AutoGenerateDeleteButton", "AutoGenerateEditButton" 
to "True", and then use a pair of"<p2>" to mark the wholepage as "Xml-based CRUD Code Sample——". 
And then drag and drop several textboxes under the GridView, with a button called "Insert".
Codes are below：

        <h2>
            Xml-based CRUD Code Sample——</h2>
        <asp:GridView ID="GridView1" runat="server" Width="70%" AutoGenerateDeleteButton="True"
            AutoGenerateEditButton="True" BackColor="#DEBA84" BorderColor="#DEBA84" BorderStyle="None"
            BorderWidth="1px" CellPadding="3" CellSpacing="2" OnRowCancelingEdit="GridView1_RowCancelingEdit"
            OnRowEditing="GridView1_RowEditing" OnRowUpdating="GridView1_RowUpdating" OnRowDeleting="GridView1_RowDeleting">
            <FooterStyle BackColor="#F7DFB5" ForeColor="#8C4510" />
            <HeaderStyle BackColor="#A55129" Font-Bold="True" ForeColor="White" />
            <PagerStyle ForeColor="#8C4510" HorizontalAlign="Center" />
            <RowStyle BackColor="#FFF7E7" ForeColor="#8C4510" />
            <SelectedRowStyle BackColor="#738A9C" Font-Bold="True" ForeColor="White" />
            <SortedAscendingCellStyle BackColor="#FFF1D4" />
            <SortedAscendingHeaderStyle BackColor="#B95C30" />
            <SortedDescendingCellStyle BackColor="#F1E5CE" />
            <SortedDescendingHeaderStyle BackColor="#93451F" />
        </asp:GridView>
    </div>
    <p>
        Id：<asp:TextBox ID="tbId" runat="server"></asp:TextBox>
    </p>
    <p>
        author：<asp:TextBox ID="tbAuthor" runat="server"></asp:TextBox>
    </p>
    <p>
        title：<asp:TextBox ID="tbTitle" runat="server"></asp:TextBox>
    </p>
    <p>
        genre：<asp:TextBox ID="tbGenre" runat="server"></asp:TextBox>
    </p>
    <p>
        price：<asp:TextBox ID="tbPrice" runat="server"></asp:TextBox>
    </p>
    <p>
        publishdate：<asp:TextBox ID="tbPublishDate" runat="server"></asp:TextBox>
    </p>
    <p>
        description：<asp:TextBox ID="tbDescription" runat="server"></asp:TextBox>
    </p>
    <asp:Button ID="btnInsert" runat="server" Height="26px" OnClick="btnInsert_Click"
        Text="Insert" Width="141px" />

Step4. Right click the project and choose "Add" -> "New Item..." -> "XML File" to create a file
and name it as "try.xml". And input the contents as what you can see in the sample's one.

Step5. Write a jQuery to pop up a confirm dialog before users delete a record:

 $(function () {

            // Find each row of the GridView
            $("tr").each(function () {

                // Find each table cell of the row and find the second linkbutton,
                // Add the confirm dialog before deleting.
                $(this).find("td:eq(0)>a:eq(1)").click(function () {

                    return confirm("Are you sure to delete?");
                });

            });
        })

 Step6. Double click the page and write codes in the Page_Load event to load
 the data from the xml and bind to the GridView. Codes look like this:

  protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                DataSet ds = new DataSet();
                ds.ReadXml(Request.MapPath("try.xml"));
                GridView1.DataSource = ds.Tables[0];
                GridView1.DataBind();
                ViewState["dt"] = ds.Tables[0];
            }
        }

Step7. Please handle Edit/Update/Delete events to implement the mapping functions
and re-databind to the GridView, codes look like this:

		protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
        {
            GridView1.EditIndex = e.NewEditIndex;
            GridView1.DataSource = (DataTable)ViewState["dt"];
            GridView1.DataBind();
        }

        protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            DataTable dt = (DataTable)ViewState["dt"];

            for (int i = 1; i < GridView1.Rows[e.RowIndex].Cells.Count; i++)
            {
                dt.Rows[e.RowIndex][i-1] = (GridView1.Rows[e.RowIndex].Cells[i].Controls[0] as TextBox).Text;
            }
            dt.AcceptChanges();
            GridView1.EditIndex = -1;
            GridView1.DataSource = dt;
            GridView1.DataBind();
            dt.WriteXml(Request.MapPath("try.xml"));
        }

        protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            GridView1.EditIndex = -1;
            DataTable dt = (DataTable)ViewState["dt"];
            GridView1.DataSource = dt;
            GridView1.DataBind();
        }

		 protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            DataTable dt = (DataTable)ViewState["dt"];
            dt.Rows.RemoveAt(e.RowIndex);
            dt.WriteXml(Request.MapPath("try.xml"));
            GridView1.DataSource = dt;
            GridView1.DataBind();
        }

Step8. Handle the event of the Insert button. Here's the following code:

		protected void btnInsert_Click(object sender, EventArgs e)
        {
            DataTable dt = (DataTable)ViewState["dt"];
            dt.Rows.Add(tbAuthor.Text, tbTitle.Text, tbGenre.Text, tbPrice.Text, tbPublishDate.Text, tbDescription.Text, tbId.Text);
            dt.AcceptChanges();
            dt.WriteXml(Request.MapPath("try.xml"));
            GridView1.DataSource = dt;
            GridView1.DataBind();
        }

/////////////////////////////////////////////////////////////////////////////

Reference：
http://www.codeproject.com/KB/webforms/Edit_Xml.aspx