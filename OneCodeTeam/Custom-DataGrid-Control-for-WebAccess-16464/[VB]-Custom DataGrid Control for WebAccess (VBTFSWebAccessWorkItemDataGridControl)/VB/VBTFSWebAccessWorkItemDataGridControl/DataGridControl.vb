'************************** Module Header ******************************'
' Module Name:   DataGridControl.vb
' Project:       VBTFSWebAccessWorkItemDataGridControl
' Copyright (c) Microsoft Corporation.
' 
' This class inherits the BaseWITControl and it uses a DataGridView to 
' represent a workitem field.
' 
' This source is subject to the Microsoft Public License.
' See http://www.microsoft.com/en-us/openness/licenses.aspx#MPL
' All other rights reserved.
' 
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED 
' WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
'************************************************************************'

Imports System.IO
Imports System.Text.RegularExpressions
Imports System.Web.UI
Imports System.Web.UI.WebControls
Imports Microsoft.TeamFoundation.WebAccess.Controls
Imports Microsoft.TeamFoundation.WebAccess.WorkItemTracking.Controls

' Defines the metadata attribute that enables an embedded resource in an assembly.
<Assembly: WebResource("VBTFSWebAccessWorkItemDataGridControl.DataGridControl.js",
 "application/x-javascript")> 

''' <summary>
''' This class inherits BaseWorkItemWebControl which implements most methods of the 
''' IWorkItemWebControl interface.
''' </summary>
Public Class DataGridControl
    Inherits BaseWorkItemWebControl
    ' The pattern to identify the columns from the attribute.
    ' The attribute should like 
    ' Column A(FieldA);Column B(FieldB);
    Private Const columnDefinitionPattern As String = "(?<display>.+?)\((?<field>.+?)\);"

    ' The panel works as a container of the controls.
    Private pnlContainer As Panel

    ' Store the value of this field.
    Private hfValue As HiddenField


    Public Sub New()
        MyBase.New(HtmlTextWriterTag.Div)
    End Sub

#Region "IWorkItemWebControl"

    ''' <summary>
    ''' Clear the value in the hidden field.
    ''' </summary>
    Public Overrides Sub Clear()
        Me.EnsureChildControls()
        Me.hfValue.Value = String.Empty
    End Sub

    ''' <summary>
    ''' Control is requested to flush any data to workitem object. 
    ''' The field value is stored in the hidden field. GetValidateXml method will 
    ''' generate a valid xml from the hfValue.Value, and then set the value of current 
    ''' field to the XML.
    ''' </summary>
    Public Overrides Sub FlushToDatasource()
        Me.EnsureChildControls()
        Dim valiadXml As String = GetValidateXml(hfValue.Value)
        Me.SetFieldValue(valiadXml)
    End Sub

    '''<summary>
    ''' Asks control to invalidate the contents and redraw.
    ''' Read the value (XML) of current field, and set hfValue.Value
    ''' to the xml.
    ''' </summary>
    Public Overrides Sub InvalidateDatasource()
        Me.EnsureChildControls()
        Me.Clear()

        If Me.HasValidField Then
            Dim valiadXml As String = GetValidateXml(TryCast(Me.Field.Value, String))
            Me.hfValue.Value = valiadXml
        End If
    End Sub


#End Region


    ''' <summary>
    ''' Generate a valid XML from the given data. 
    ''' </summary>
    ''' <param name="data"></param>
    ''' <returns></returns>
    Private Function GetValidateXml(ByVal data As String) As String
        Using table As New DataTable("DataTable")
            Try
                ' Determine whether the data is a valiad xml. 
                Using reader As New StringReader(data)
                    table.ReadXml(reader)
                End Using
            Catch
            End Try

            ' Add columns to the DataTable if the column definition changes. 
            Dim columnsAttribute As String = MyBase.Properties("columns")
            Dim matches As MatchCollection = Regex.Matches(columnsAttribute,
                                                           columnDefinitionPattern)

            For Each match As Match In matches
                If Not table.Columns.Contains(match.Groups("field").Value) Then
                    table.Columns.Add(match.Groups("field").Value)
                End If
            Next match

            ' Return the xml generated by the DataTable.
            Using writer As New StringWriter()
                table.WriteXml(writer, XmlWriteMode.WriteSchema)
                Return writer.ToString()
            End Using
        End Using
    End Function

#Region "Overrides methods"

    ''' <summary>
    ''' Create the child controls.
    ''' </summary>
    Protected Overrides Sub CreateChildControls()
        Me.hfValue = New HiddenField()
        Me.pnlContainer = New Panel()

        Me.pnlContainer.Controls.Add(Me.hfValue)
        Me.Controls.Add(Me.pnlContainer)
    End Sub

    ''' <summary>
    ''' Initialize this control.
    ''' </summary>
    Public Overrides Sub InitializeControl()
        MyBase.InitializeControl()
        Me.EnsureChildControls()
    End Sub

    ''' <summary>
    ''' Register the client script.
    ''' 1. VBTFSWebAccessWorkItemDataGridControl.DataGridControl.js
    ''' 2. Use dataGridControl method in VBTFSWebAccessWorkItemDataGridControl.DataGridControl.js
    '''    to generate a client object.
    ''' </summary>
    ''' <param name="e"></param>
    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)
        MyBase.OnPreRender(e)

        ScriptManager.RegisterClientScriptResource(
            Me,
            GetType(DataGridControl),
            "VBTFSWebAccessWorkItemDataGridControl.DataGridControl.js")

        Dim columnsAttribute As String = MyBase.Properties("columns")
        ScriptHelper.RegisterObjectScript(
            Me,
            "dataGridControl",
            New Object() {MyBase.ClientEditorObjectId,
                          MyBase.WorkItemFieldName,
                          MyBase.ControlId,
                          Me.pnlContainer.ClientID,
                          Me.hfValue.ClientID,
                          columnsAttribute,
                          MyBase.ReadOnly})
    End Sub

#End Region
End Class
